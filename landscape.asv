
Nsubjects = 5;
Nobservations = 100;
noise = 0.8;

X = randn(Nsubjects, Nobservations); 

M = randn(Nsubjects,Nsubjects);

Y = M*X + noise*randn(Nsubjects, Nobservations); % Datasets so that X and Y are correlated + corrupted by noise

C_xy = X*Y';
C_xx = X*X';
C_yy = Y*Y';

S = randn(Nsubjects, Nobservations);  % Same brain areas in different experiment. Just noise
T = randn(Nsubjects,Nsubjects)*S + 0.5*randn(Nsubjects, Nobservations);
D_xy = S*T';

[list_wx, list_wy, list_lbd3s] = compute_weights_full(C_xx, C_yy, C_xy, D_xy);
[r_wx, r_wy, r_lam, wxcxywy, wxdxywy, wxcxxwx, wycyywy] = compute_weights_full(C_xx, C_yy, C_xy, D_xy)

figure(1), clf;
for ll = r_lam
    for lbd3 = (ll-0.1): 0.01: (ll+0.1)
        M = inv(C_xx)*(C_xy+lbd3*D_xy)*inv(C_yy)* ((C_xy+lbd3*D_xy)');
        [W,D] = eig(M);
    
        eigenvalues = diag(D);
    
        constraint = zeros(Nsubjects,1);
        for i = 1:Nsubjects
            w_x = W(:,i);
            w_x = w_x./sqrt(w_x'*C_xx*w_x);
            w_y = inv(C_yy)*(C_xy+lbd3*D_xy)'*w_x;
            constraint(i) = w_x'*D_xy*w_y;
        end
    
        figure(1)
        scatter(lbd3*ones(Nsubjects,1), constraint, 'k.')
        ylabel("Constraint")
        hold on;
    end

end

%Check the roots for constraint
plot(list_lbd3s, 0, 'ro')
plot([-1,1], [0,0], 'k-')
ylim([-0.5, 0.5])
title(length(list_lbd3s))